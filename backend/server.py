from fastapi import FastAPI, APIRouter, HTTPException, Request, Query
from dotenv import load_dotenv
from starlette.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorClient
import os
import logging
import requests
import json
import hashlib
import secrets
from pathlib import Path
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
from datetime import datetime
import uuid
import re

ROOT_DIR = Path(__file__).parent
load_dotenv(ROOT_DIR / '.env')

# MongoDB connection
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db = client[os.environ['DB_NAME']]

# API Configuration
TELEGRAM_TOKEN = os.environ['TELEGRAM_TOKEN']
WEBHOOK_SECRET = os.environ['WEBHOOK_SECRET']
USERSBOX_TOKEN = os.environ['USERSBOX_TOKEN']
USERSBOX_BASE_URL = os.environ['USERSBOX_BASE_URL']
ADMIN_USERNAME = os.environ['ADMIN_USERNAME']
REQUIRED_CHANNEL = os.environ['REQUIRED_CHANNEL']
BOT_USERNAME = os.environ.get('BOT_USERNAME', 'search1_test_bot')

# Create the main app
app = FastAPI(title="Usersbox Telegram Bot API")

# Create a router with the /api prefix
api_router = APIRouter(prefix="/api")

# Models
class User(BaseModel):
    telegram_id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    attempts_remaining: int = 0  # Changed to 0 by default
    referred_by: Optional[int] = None
    referral_code: str
    total_referrals: int = 0
    created_at: datetime = Field(default_factory=datetime.utcnow)
    is_admin: bool = False
    last_active: datetime = Field(default_factory=datetime.utcnow)
    is_subscribed: bool = False

class Search(BaseModel):
    user_id: int
    query: str
    search_type: str  # phone, email, name, etc.
    results: Dict[str, Any]
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    attempt_used: bool = True
    success: bool = True

class Referral(BaseModel):
    referrer_id: int
    referred_id: int
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    attempt_given: bool = True

class TelegramMessage(BaseModel):
    chat_id: int
    text: str
    parse_mode: str = "Markdown"

# Helper Functions
def generate_referral_code(telegram_id: int) -> str:
    """Generate unique referral code"""
    data = f"{telegram_id}_{secrets.token_hex(8)}"
    return hashlib.md5(data.encode()).hexdigest()[:8]

def detect_search_type(query: str) -> str:
    """Detect search type based on query pattern"""
    query = query.strip()
    
    # Phone number patterns
    phone_patterns = [
        r'^\+?[7-8]\d{10}$',  # Russian numbers
        r'^\+?\d{10,15}$',    # International numbers
        r'^[7-8]\(\d{3}\)\d{3}-?\d{2}-?\d{2}$'  # Formatted Russian
    ]
    
    for pattern in phone_patterns:
        if re.match(pattern, query.replace(' ', '').replace('-', '').replace('(', '').replace(')', '')):
            return "phone"
    
    # Email pattern
    if re.match(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', query):
        return "email"
    
    # Car number pattern (Russian)
    if re.match(r'^[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]\d{3}[–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•]{2}\d{2,3}$', query.upper().replace(' ', '')):
        return "car_number"
    
    # Username/nickname pattern
    if query.startswith('@') or re.match(r'^[a-zA-Z0-9_]+$', query):
        return "username"
    
    # IP address pattern
    if re.match(r'^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$', query):
        return "ip_address"
    
    # Address pattern (contains typical address words)
    address_keywords = ['—É–ª–∏—Ü–∞', '—É–ª', '–ø—Ä–æ—Å–ø–µ–∫—Ç', '–ø—Ä', '–ø–µ—Ä–µ—É–ª–æ–∫', '–ø–µ—Ä', '–¥–æ–º', '–¥', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–∫–≤']
    if any(keyword in query.lower() for keyword in address_keywords):
        return "address"
    
    # Name pattern (2-3 words, Cyrillic or Latin)
    words = query.split()
    if 2 <= len(words) <= 3 and all(re.match(r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z]+$', word) for word in words):
        return "name"
    
    # Default to general search
    return "general"

def format_search_results(results: Dict[str, Any], query: str, search_type: str) -> str:
    """Format usersbox API results for Telegram with enhanced display"""
    if results.get('status') == 'error':
        return f"‚ùå *–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:* {results.get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

    data = results.get('data', {})
    total_count = data.get('count', 0)
    
    if total_count == 0:
        return f"üîç *–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É:* `{query}`\n\n‚ùå *–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\nüí° *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*\n‚Ä¢ –î—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞\n‚Ä¢ –ü–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ"

    # Create search type emoji mapping
    type_emojis = {
        "phone": "üì±",
        "email": "üìß", 
        "name": "üë§",
        "car_number": "üöó",
        "username": "üÜî",
        "ip_address": "üåê",
        "address": "üè†",
        "general": "üîç"
    }
    
    search_emoji = type_emojis.get(search_type, "üîç")
    
    formatted_text = f"{search_emoji} *–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É:* `{query}`\n"
    formatted_text += f"üîé *–¢–∏–ø –ø–æ–∏—Å–∫–∞:* {search_type}\n\n"
    formatted_text += f"üìä *–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:* {total_count} –∑–∞–ø–∏—Å–µ–π\n\n"

    # Format search results from /search endpoint
    if 'items' in data and isinstance(data['items'], list):
        formatted_text += "üìã *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n"
        
        for i, source_data in enumerate(data['items'][:5], 1):  # Limit to 5 sources
            if 'source' in source_data and 'hits' in source_data:
                source = source_data['source']
                hits = source_data['hits']
                hits_count = hits.get('hitsCount', hits.get('count', 0))
                
                # Database name translation
                db_names = {
                    'yandex': '–Ø–Ω–¥–µ–∫—Å',
                    'avito': '–ê–≤–∏—Ç–æ',
                    'vk': '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ',
                    'ok': '–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏',
                    'delivery_club': 'Delivery Club',
                    'cdek': '–°–î–≠–ö'
                }
                
                db_display = db_names.get(source.get('database', ''), source.get('database', 'N/A'))
                
                formatted_text += f"*{i}. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:* {db_display}\n"
                formatted_text += f" *–ö–æ–ª–ª–µ–∫—Ü–∏—è:* {source.get('collection', 'N/A')}\n"
                formatted_text += f" *–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:* {hits_count}\n"

                # Format individual items if available
                if 'items' in hits and hits['items']:
                    formatted_text += " *–î–∞–Ω–Ω—ã–µ:*\n"
                    for item in hits['items'][:2]:  # Show first 2 items per source
                        for key, value in item.items():
                            if key.startswith('_'):
                                continue  # Skip internal fields
                            
                            if key in ['phone', '—Ç–µ–ª–µ—Ñ–æ–Ω', 'tel', 'mobile']:
                                formatted_text += f" üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{value}`\n"
                            elif key in ['email', '–ø–æ—á—Ç–∞', 'mail', 'e_mail']:
                                formatted_text += f" üìß Email: `{value}`\n"
                            elif key in ['full_name', 'name', '–∏–º—è', '—Ñ–∏–æ', 'first_name', 'last_name']:
                                formatted_text += f" üë§ –ò–º—è: `{value}`\n"
                            elif key in ['birth_date', 'birthday', '–¥–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è', 'bdate']:
                                formatted_text += f" üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: `{value}`\n"
                            elif key in ['address', '–∞–¥—Ä–µ—Å', 'city', '–≥–æ—Ä–æ–¥']:
                                if isinstance(value, dict):
                                    addr_parts = []
                                    for addr_key, addr_val in value.items():
                                        if addr_val:
                                            addr_parts.append(f"{addr_val}")
                                    if addr_parts:
                                        formatted_text += f" üè† –ê–¥—Ä–µ—Å: `{', '.join(addr_parts)}`\n"
                                else:
                                    formatted_text += f" üè† –ê–¥—Ä–µ—Å: `{value}`\n"
                            elif key in ['sex', 'gender', '–ø–æ–ª']:
                                gender_map = {'1': '–ñ–µ–Ω—Å–∫–∏–π', '2': '–ú—É–∂—Å–∫–æ–π', 'male': '–ú—É–∂—Å–∫–æ–π', 'female': '–ñ–µ–Ω—Å–∫–∏–π'}
                                formatted_text += f" ‚ö• –ü–æ–ª: `{gender_map.get(str(value), value)}`\n"
                            elif key in ['age', '–≤–æ–∑—Ä–∞—Å—Ç']:
                                formatted_text += f" üéÇ –í–æ–∑—Ä–∞—Å—Ç: `{value}`\n"
                            elif key in ['vk_id', 'user_id', 'id']:
                                formatted_text += f" üÜî ID: `{value}`\n"
                            else:
                                # Generic field formatting
                                if isinstance(value, (str, int, float)) and len(str(value)) < 100:
                                    formatted_text += f" ‚Ä¢ {key}: `{value}`\n"
                        
                        formatted_text += "\n"

    # Format explain results
    elif 'count' in data and isinstance(data.get('items'), list):
        formatted_text += "üìã *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∞–∑–∞–º:*\n\n"
        for i, item in enumerate(data['items'][:10], 1):  # Show top 10
            source = item.get('source', {})
            hits = item.get('hits', {})
            count = hits.get('count', 0)
            
            db_display = source.get('database', 'N/A')
            if db_display in ['yandex', 'avito', 'vk', 'ok']:
                db_display = db_display.upper()
            
            formatted_text += f"*{i}.* {db_display} / {source.get('collection', 'N/A')}: {count} –∑–∞–ø–∏—Å–µ–π\n"

    # Add security and usage note
    formatted_text += "\nüîí *–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:*\n"
    formatted_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ\n"
    formatted_text += "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å\n"
    formatted_text += "‚Ä¢ –ù–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –∑–∞–∫–æ–Ω—ã\n\n"
    formatted_text += "üí° *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ü–æ–∫–∞–∑–∞–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
    
    return formatted_text

async def check_subscription(user_id: int) -> bool:
    """Check if user is subscribed to required channel"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getChatMember"
        params = {
            "chat_id": REQUIRED_CHANNEL,
            "user_id": user_id
        }
        
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                status = data.get('result', {}).get('status')
                return status in ['member', 'administrator', 'creator']
        
        return False
    except Exception as e:
        logging.error(f"Subscription check error: {e}")
        return False

async def send_telegram_message(chat_id: int, text: str, parse_mode: str = None, reply_markup: dict = None) -> bool:
    """Send message to Telegram user with optional keyboard"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text
    }
    
    # Only add parse_mode if it's explicitly set
    if parse_mode:
        payload["parse_mode"] = parse_mode
    
    if reply_markup:
        payload["reply_markup"] = reply_markup
    
    try:
        logging.info(f"Sending message to chat_id={chat_id}, text length={len(text)}")
        response = requests.post(url, json=payload, timeout=10)
        logging.info(f"Telegram API response: status={response.status_code}, response={response.text}")
        return response.status_code == 200
    except Exception as e:
        logging.error(f"Failed to send Telegram message: {e}")
        return False

async def get_or_create_user(telegram_id: int, username: str = None, first_name: str = None, last_name: str = None) -> User:
    """Get existing user or create new one"""
    user_data = await db.users.find_one({"telegram_id": telegram_id})
    
    if user_data:
        # Update last active and user info
        await db.users.update_one(
            {"telegram_id": telegram_id},
            {
                "$set": {
                    "last_active": datetime.utcnow(),
                    "username": username,
                    "first_name": first_name,
                    "last_name": last_name
                }
            }
        )
        return User(**user_data)
    else:
        # Create new user
        referral_code = generate_referral_code(telegram_id)
        is_admin = username == ADMIN_USERNAME if username else False
        
        user = User(
            telegram_id=telegram_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            referral_code=referral_code,
            is_admin=is_admin,
            attempts_remaining=999 if is_admin else 0  # Admin gets unlimited, others get 0
        )
        
        await db.users.insert_one(user.dict())
        return user

async def process_referral(referred_user_id: int, referral_code: str) -> bool:
    """Process referral and give attempt to referrer"""
    try:
        # Find referrer by code
        referrer = await db.users.find_one({"referral_code": referral_code})
        if not referrer or referrer['telegram_id'] == referred_user_id:
            return False

        # Check if referral already exists
        existing_referral = await db.referrals.find_one({
            "referrer_id": referrer['telegram_id'],
            "referred_id": referred_user_id
        })
        if existing_referral:
            return False

        # Create referral record
        referral = Referral(
            referrer_id=referrer['telegram_id'],
            referred_id=referred_user_id
        )
        await db.referrals.insert_one(referral.dict())

        # Give attempt to referrer and update referral count
        await db.users.update_one(
            {"telegram_id": referrer['telegram_id']},
            {
                "$inc": {
                    "attempts_remaining": 1,
                    "total_referrals": 1
                }
            }
        )

        # Give 1 attempt to referred user
        await db.users.update_one(
            {"telegram_id": referred_user_id},
            {
                "$set": {"referred_by": referrer['telegram_id']},
                "$inc": {"attempts_remaining": 1}
            }
        )

        # Notify referrer
        await send_telegram_message(
            referrer['telegram_id'],
            f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n"
            f"üíé –í—ã –ø–æ–ª—É—á–∏–ª–∏ +1 –ø–æ–ø—ã—Ç–∫—É –ø–æ–∏—Å–∫–∞\n"
            f"üë• –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrer['total_referrals'] + 1}"
        )

        return True
    except Exception as e:
        logging.error(f"Referral processing error: {e}")
        return False

# API Routes
@api_router.get("/")
async def root():
    return {"message": "Usersbox Telegram Bot API", "status": "running"}

@api_router.post("/webhook/{secret}")
async def telegram_webhook(secret: str, request: Request):
    """Handle Telegram webhook"""
    logging.info(f"Webhook called with secret: {secret}")
    
    if secret != WEBHOOK_SECRET:
        logging.error(f"Invalid webhook secret received: {secret}, expected: {WEBHOOK_SECRET}")
        raise HTTPException(status_code=403, detail="Invalid webhook secret")
    
    try:
        raw_body = await request.body()
        logging.info(f"Raw webhook body: {raw_body}")
        
        update_data = await request.json()
        logging.info(f"Parsed webhook data: {update_data}")
        
        await handle_telegram_update(update_data)
        return {"status": "ok"}
    except Exception as e:
        logging.error(f"Webhook processing failed: {e}")
        raise HTTPException(status_code=500, detail=f"Webhook processing failed: {str(e)}")

async def handle_callback_query(callback_query: Dict[str, Any]):
    """Handle callback queries from inline keyboard buttons"""
    chat_id = callback_query.get('message', {}).get('chat', {}).get('id')
    user_id = callback_query.get('from', {}).get('id')
    data = callback_query.get('data')
    callback_query_id = callback_query.get('id')
    
    if not chat_id or not user_id or not data:
        logging.error("Missing required callback data")
        return
    
    # Answer callback query to remove loading
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/answerCallbackQuery"
        requests.post(url, json={"callback_query_id": callback_query_id}, timeout=5)
    except Exception as e:
        logging.error(f"Failed to answer callback query: {e}")
    
    if data == "check_subscription":
        # Get user
        user = await get_or_create_user(
            telegram_id=user_id,
            username=callback_query.get('from', {}).get('username'),
            first_name=callback_query.get('from', {}).get('first_name'),
            last_name=callback_query.get('from', {}).get('last_name')
        )
        
        # Check subscription
        is_subscribed = await check_subscription(user_id)
        if is_subscribed:
            # Update user subscription status
            await db.users.update_one(
                {"telegram_id": user_id},
                {"$set": {"is_subscribed": True}}
            )
            
            await send_telegram_message(
                chat_id,
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                "üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!\n"
                "üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
            )
        else:
            keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", "url": "https://t.me/uzri_sebya"}
                    ],
                    [
                        {"text": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "check_subscription"}
                    ]
                ]
            }
            
            await send_telegram_message(
                chat_id,
                "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
                "üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @uzri_sebya –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' —Å–Ω–æ–≤–∞",
                reply_markup=keyboard
            )

async def handle_telegram_update(update_data: Dict[str, Any]):
    """Process incoming Telegram update"""
    logging.info(f"Received telegram update: {update_data}")
    
    # Handle callback queries (button presses)
    callback_query = update_data.get('callback_query')
    if callback_query:
        await handle_callback_query(callback_query)
        return
    
    message = update_data.get('message')
    if not message:
        logging.info("No message in update")
        return

    chat = message.get('chat', {})
    chat_id = chat.get('id')
    text = message.get('text', '')
    user_info = message.get('from', {})
    
    logging.info(f"Processing message: chat_id={chat_id}, text='{text}', user={user_info.get('username', 'unknown')}")
    
    if not chat_id:
        logging.error("No chat_id in message")
        return

    # Get or create user
    user = await get_or_create_user(
        telegram_id=user_info.get('id', chat_id),
        username=user_info.get('username'),
        first_name=user_info.get('first_name'),
        last_name=user_info.get('last_name')
    )

    # Handle commands
    if text.startswith('/start'):
        await handle_start_command(chat_id, text, user)
    elif text.startswith('/search'):
        await handle_search_command(chat_id, text, user)
    elif text.startswith('/balance'):
        await handle_balance_command(chat_id, user)
    elif text.startswith('/referral'):
        await handle_referral_command(chat_id, user)
    elif text.startswith('/help'):
        await handle_help_command(chat_id, user)
    elif text.startswith('/capabilities'):
        await handle_capabilities_command(chat_id, user)
    elif text.startswith('/admin') and user.is_admin:
        await handle_admin_command(chat_id, text, user)
    elif text.startswith('/give') and user.is_admin:
        await handle_give_attempts_command(chat_id, text, user)
    elif text.startswith('/stats') and user.is_admin:
        await handle_stats_command(chat_id, user)
    else:
        # Check subscription first
        if not user.is_admin:
            is_subscribed = await check_subscription(user.telegram_id)
            if not is_subscribed:
                keyboard = {
                    "inline_keyboard": [
                        [
                            {"text": "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", "url": "https://t.me/uzri_sebya"}
                        ],
                        [
                            {"text": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "check_subscription"}
                        ]
                    ]
                }
                
                await send_telegram_message(
                    chat_id,
                    "üîí *–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!*\n\n"
                    "üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @uzri_sebya –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'\n\n"
                    "üí° –ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
                    reply_markup=keyboard
                )
                return
        
        # Treat as search query if user has attempts
        if user.attempts_remaining > 0 or user.is_admin:
            await handle_search_command(chat_id, f"/search {text}", user)
        else:
            await send_telegram_message(
                chat_id,
                "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∏—Å–∫–∞!\n\n"
                "üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /referral –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏."
            )

async def handle_start_command(chat_id: int, text: str, user: User):
    """Handle /start command with enhanced welcome"""
    # Check for referral code
    parts = text.split()
    referral_bonus = False
    if len(parts) > 1:
        referral_code = parts[1]
        referral_bonus = await process_referral(user.telegram_id, referral_code)
    
    # Check subscription for non-admin users
    if not user.is_admin:
        is_subscribed = await check_subscription(user.telegram_id)
        if not is_subscribed:
            keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", "url": "https://t.me/uzri_sebya"}
                    ],
                    [
                        {"text": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "check_subscription"}
                    ]
                ]
            }
            
            welcome_text = "üîç –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í USERSBOX BOT! üîç\n\n"
            welcome_text += "üéØ –ß–¢–û –£–ú–ï–ï–¢ –≠–¢–û–¢ –ë–û–¢?\n"
            welcome_text += "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∏–ª–∏ –±–ª–∏–∑–∫–∏—Ö –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—Å –ø–æ–ø–∞–ª–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ç–µ—á–∫–∏ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n\n"
            welcome_text += "üîí –í–ê–ñ–ù–û–ï –¢–†–ï–ë–û–í–ê–ù–ò–ï:\n"
            welcome_text += "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n"
            welcome_text += "üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @uzri_sebya –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'"
            
            await send_telegram_message(chat_id, welcome_text, reply_markup=keyboard)
            return

    # Create simple welcome message without complex formatting
    welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
    
    welcome_text += "üîç USERSBOX SEARCH BOT\n\n"
    
    welcome_text += "üéØ –ß–¢–û –≠–¢–û–¢ –ë–û–¢ –£–ú–ï–ï–¢?\n"
    welcome_text += "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç \"–ø—Ä–æ–±–∏—Ç—å\" —Å–µ–±—è –∏–ª–∏ –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–º —Å–ª–∏—Ç–∞ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.\n\n"
    
    welcome_text += "üîç –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ü–û–ò–°–ö–ê:\n"
    welcome_text += "üì± –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+79123456789)\n"
    welcome_text += "üìß –ü–æ email –∞–¥—Ä–µ—Å—É (ivan@mail.ru)\n"
    welcome_text += "üë§ –ü–æ –§–ò–û (–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤)\n"
    welcome_text += "üöó –ü–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ê123–í–°777)\n"
    welcome_text += "üÜî –ü–æ –Ω–∏–∫–Ω–µ–π–º—É (@username)\n"
    welcome_text += "üè† –ü–æ –∞–¥—Ä–µ—Å—É (–ú–æ—Å–∫–≤–∞ –¢–≤–µ—Ä—Å–∫–∞—è 1)\n"
    welcome_text += "üåê –ü–æ IP –∞–¥—Ä–µ—Å—É (192.168.1.1)\n\n"
    
    welcome_text += "üí° –ö–ê–ö –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø?\n"
    welcome_text += "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
    welcome_text += "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ = –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
    welcome_text += "‚Ä¢ Email = –ø–æ–∏—Å–∫ –ø–æ –ø–æ—á—Ç–µ\n"
    welcome_text += "‚Ä¢ –ò–º—è –§–∞–º–∏–ª–∏—è = –ø–æ–∏—Å–∫ –ø–æ –§–ò–û\n"
    welcome_text += "–ò —Ç–∞–∫ –¥–∞–ª–µ–µ!\n\n"

    welcome_text += f"üìà –í–ê–® –°–¢–ê–¢–£–°:\n"
    welcome_text += f"üíé –ü–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞: {user.attempts_remaining}\n"
    welcome_text += f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {user.total_referrals}\n"
    welcome_text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n\n"
    
    if referral_bonus:
        welcome_text += "üéâ –ë–û–ù–£–°! –í—ã –ø–æ–ª—É—á–∏–ª–∏ +1 –ø–æ–ø—ã—Ç–∫—É –∑–∞ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n"

    welcome_text += "üéÆ –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê:\n"
    welcome_text += "/search [–∑–∞–ø—Ä–æ—Å] - –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
    welcome_text += "/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ø—ã—Ç–æ–∫\n"
    welcome_text += "/referral - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
    welcome_text += "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
    welcome_text += "/capabilities - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n\n"

    if user.is_admin:
        welcome_text += "üîß –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨:\n"
        welcome_text += "/admin - –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        welcome_text += "/give [ID] [–ø–æ–ø—ã—Ç–∫–∏] - –≤—ã–¥–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏\n"
        welcome_text += "/stats - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"

    welcome_text += "üí∏ –ü–û–õ–£–ß–ò–¢–¨ –ü–û–ü–´–¢–ö–ò:\n"
    welcome_text += "üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞: +1 –ø–æ–ø—ã—Ç–∫–∞\n"
    welcome_text += "üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /referral –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏\n\n"

    welcome_text += "üöÄ –ì–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"

    await send_telegram_message(chat_id, welcome_text)

async def handle_capabilities_command(chat_id: int, user: User):
    """Handle capabilities command - detailed list of search capabilities"""
    cap_text = "üéØ *‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê*\n"
    cap_text += " üîç *–í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ü–û–ò–°–ö–ê*\n"
    cap_text += "*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê* üéØ\n\n"
    
    cap_text += "üì± *‚ïê‚ïê‚ïê –ü–û–ò–°–ö –ü–û –¢–ï–õ–ï–§–û–ù–£ ‚ïê‚ïê‚ïê*\n"
    cap_text += "‚Ä¢ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞: `+79123456789`\n"
    cap_text += "‚Ä¢ –ë–µ–∑ –ø–ª—é—Å–∞: `79123456789`\n"
    cap_text += "‚Ä¢ –° –∫–æ–¥–æ–º 8: `89123456789`\n"
    cap_text += "‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: `+7(912)345-67-89`\n\n"
    
    cap_text += "üìß *‚ïê‚ïê‚ïê –ü–û–ò–°–ö –ü–û EMAIL ‚ïê‚ïê‚ïê*\n"
    cap_text += "‚Ä¢ –õ—é–±—ã–µ –¥–æ–º–µ–Ω—ã: `user@mail.ru`\n"
    cap_text += "‚Ä¢ Gmail: `user@gmail.com`\n"
    cap_text += "‚Ä¢ –Ø–Ω–¥–µ–∫—Å: `user@yandex.ru`\n"
    cap_text += "‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ: `user@company.com`\n\n"
    
    cap_text += "üë§ *‚ïê‚ïê‚ïê –ü–û–ò–°–ö –ü–û –§–ò–û ‚ïê‚ïê‚ïê*\n"
    cap_text += "‚Ä¢ –ü–æ–ª–Ω–æ–µ –§–ò–û: `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ –°–∏–¥–æ—Ä–æ–≤`\n"
    cap_text += "‚Ä¢ –ò–º—è –§–∞–º–∏–ª–∏—è: `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤`\n"
    cap_text += "‚Ä¢ –¢–æ–ª—å–∫–æ –∏–º—è: `–ò–≤–∞–Ω`\n"
    cap_text += "‚Ä¢ –ù–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ: `Ivan Petrov`\n\n"
    
    cap_text += "üöó *‚ïê‚ïê‚ïê –ü–û–ò–°–ö –ü–û –ê–í–¢–û ‚ïê‚ïê‚ïê*\n"
    cap_text += "‚Ä¢ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞: `–ê123–í–°777`\n"
    cap_text += "‚Ä¢ –° –ø—Ä–æ–±–µ–ª–∞–º–∏: `–ê 123 –í–° 77`\n"
    cap_text += "‚Ä¢ –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: `–ê123–í–°99`\n\n"
    
    cap_text += "üÜî *‚ïê‚ïê‚ïê –ü–û–ò–°–ö –ü–û –ù–ò–ö–ù–ï–ô–ú–£ ‚ïê‚ïê‚ïê*\n"
    cap_text += "‚Ä¢ –° —Å–æ–±–∞—á–∫–æ–π: `@username`\n"
    cap_text += "‚Ä¢ –ë–µ–∑ —Å–æ–±–∞—á–∫–∏: `username`\n"
    cap_text += "‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `123456789`\n\n"
    
    cap_text += "üè† *‚ïê‚ïê‚ïê –ü–û–ò–°–ö –ü–û –ê–î–†–ï–°–£ ‚ïê‚ïê‚ïê*\n"
    cap_text += "‚Ä¢ –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å: `–ú–æ—Å–∫–≤–∞ —É–ª –¢–≤–µ—Ä—Å–∫–∞—è –¥1`\n"
    cap_text += "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã: `–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞`\n"
    cap_text += "‚Ä¢ –ì–æ—Ä–æ–¥: `–ú–æ—Å–∫–≤–∞`\n\n"
    
    cap_text += "üåê *‚ïê‚ïê‚ïê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û ‚ïê‚ïê‚ïê*\n"
    cap_text += "‚Ä¢ IP –∞–¥—Ä–µ—Å–∞: `192.168.1.1`\n"
    cap_text += "‚Ä¢ –û–±—â–∏–π –ø–æ–∏—Å–∫: –ª—é–±–æ–π —Ç–µ–∫—Å—Ç\n\n"
    
    cap_text += "üóÉÔ∏è *‚ïê‚ïê‚ïê –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–• ‚ïê‚ïê‚ïê*\n"
    cap_text += "‚Ä¢ üì± –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã (Telegram, WhatsApp)\n"
    cap_text += "‚Ä¢ üåê –°–æ—Ü—Å–µ—Ç–∏ (VK, OK, Instagram)\n"
    cap_text += "‚Ä¢ üõí –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã (Avito, OZON)\n"
    cap_text += "‚Ä¢ üöö –î–æ—Å—Ç–∞–≤–∫–∞ (CDEK, Delivery Club)\n"
    cap_text += "‚Ä¢ üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
    cap_text += "‚Ä¢ üìã –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–∞–∑—ã\n"
    cap_text += "‚Ä¢ üéØ –ò –µ—â–µ 100+ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤!\n\n"
    
    cap_text += "üí° *‚ïê‚ïê‚ïê –°–û–í–ï–¢–´ –ü–û –ü–û–ò–°–ö–£ ‚ïê‚ïê‚ïê*\n"
    cap_text += "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
    cap_text += "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã\n"
    cap_text += "‚úÖ –ü—Ä–æ–±—É–π—Ç–µ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏\n"
    cap_text += "‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è\n"
    cap_text += "‚ùå –ò–∑–±–µ–≥–∞–π—Ç–µ –æ–ø–µ—á–∞—Ç–æ–∫\n\n"
    
    cap_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    cap_text += "üîç *–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ - –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!*"
    
    await send_telegram_message(chat_id, cap_text)

async def handle_search_command(chat_id: int, text: str, user: User):
    """Handle search command with enhanced search type detection"""
    # Extract query
    query = text.replace('/search', '', 1).strip()
    if not query:
        await send_telegram_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "üì± +79123456789 - –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
            "üìß ivan@mail.ru - –ø–æ–∏—Å–∫ –ø–æ email\n"
            "üë§ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ - –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏\n\n"
            "üí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /capabilities –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
        )
        return

    # Check subscription for non-admin users
    if not user.is_admin:
        is_subscribed = await check_subscription(user.telegram_id)
        if not is_subscribed:
            keyboard = {
                "inline_keyboard": [
                    [
                        {"text": "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", "url": "https://t.me/uzri_sebya"}
                    ],
                    [
                        {"text": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "callback_data": "check_subscription"}
                    ]
                ]
            }
            
            await send_telegram_message(
                chat_id,
                "üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!\n\n"
                "üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ @uzri_sebya –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'",
                reply_markup=keyboard
            )
            return

    # Check attempts
    if user.attempts_remaining <= 0 and not user.is_admin:
        await send_telegram_message(
            chat_id,
            "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∏—Å–∫–∞!\n\n"
            "üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /referral –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏."
        )
        return

    # Detect search type
    search_type = detect_search_type(query)
    
    # Send searching message with detected type
    type_emojis = {
        "phone": "üì±",
        "email": "üìß", 
        "name": "üë§",
        "car_number": "üöó",
        "username": "üÜî",
        "ip_address": "üåê",
        "address": "üè†",
        "general": "üîç"
    }
    
    search_emoji = type_emojis.get(search_type, "üîç")
    await send_telegram_message(
        chat_id, 
        f"{search_emoji} –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...\n"
        f"üîç –¢–∏–ø: {search_type}\n"
        f"‚è±Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ..."
    )

    try:
        # Call usersbox API
        headers = {"Authorization": USERSBOX_TOKEN}
        response = requests.get(
            f"{USERSBOX_BASE_URL}/search",
            headers=headers,
            params={"q": query},
            timeout=30
        )

        results = response.json()

        # Format and send results
        formatted_results = format_search_results(results, query, search_type)
        await send_telegram_message(chat_id, formatted_results)

        # Save search record
        search = Search(
            user_id=user.telegram_id,
            query=query,
            search_type=search_type,
            results=results,
            success=response.status_code == 200
        )
        await db.searches.insert_one(search.dict())

        # Deduct attempt (except for admin)
        if not user.is_admin and response.status_code == 200:
            await db.users.update_one(
                {"telegram_id": user.telegram_id},
                {"$inc": {"attempts_remaining": -1}}
            )
            
            # Update user object
            user.attempts_remaining -= 1

            # Show remaining attempts
            if user.attempts_remaining > 0:
                await send_telegram_message(
                    chat_id,
                    f"üíé –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {user.attempts_remaining}"
                )
            else:
                await send_telegram_message(
                    chat_id,
                    "‚ùå –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n\n"
                    "üîó –ü–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫, –ø—Ä–∏–≥–ª–∞—Å–∏–≤ –¥—Ä—É–∑–µ–π:\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /referral"
                )

    except requests.exceptions.RequestException as e:
        logging.error(f"Usersbox API error: {e}")
        await send_telegram_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞\n\n"
            "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except Exception as e:
        logging.error(f"Search error: {e}")
        await send_telegram_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def handle_balance_command(chat_id: int, user: User):
    """Handle balance command with enhanced statistics"""
    # Get user's search history
    recent_searches = await db.searches.find({"user_id": user.telegram_id}).sort("timestamp", -1).limit(5).to_list(5)
    total_searches = await db.searches.count_documents({"user_id": user.telegram_id})
    successful_searches = await db.searches.count_documents({"user_id": user.telegram_id, "success": True})

    balance_text = "üí∞ *‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê*\n"
    balance_text += " üíé *–í–ê–® –ë–ê–õ–ê–ù–° –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n"
    balance_text += "*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê* üí∞\n\n"

    # Balance section
    balance_text += "üíé *‚ïê‚ïê‚ïê –ë–ê–õ–ê–ù–° –ü–û–ü–´–¢–û–ö ‚ïê‚ïê‚ïê*\n"
    balance_text += f"üîç *–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–∏—Å–∫–æ–≤:* `{user.attempts_remaining}`\n"
    balance_text += f"üë• *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:* `{user.total_referrals}`\n"
    balance_text += f"üìÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:* `{user.created_at.strftime('%d.%m.%Y %H:%M')}`\n"
    balance_text += f"‚è∞ *–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* `{user.last_active.strftime('%d.%m.%Y %H:%M')}`\n\n"

    # Statistics section
    balance_text += "üìä *‚ïê‚ïê‚ïê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ò–°–ö–û–í ‚ïê‚ïê‚ïê*\n"
    balance_text += f"üîç *–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤:* `{total_searches}`\n"
    balance_text += f"‚úÖ *–£—Å–ø–µ—à–Ω—ã—Ö:* `{successful_searches}`\n"
    
    if total_searches > 0:
        success_rate = (successful_searches / total_searches) * 100
        balance_text += f"üìà *–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:* `{success_rate:.1f}%`\n"
    else:
        balance_text += f"üìà *–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:* `0%`\n"
    
    balance_text += f"üéØ *–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:* `{user.referral_code}`\n\n"

    # Recent searches with types
    if recent_searches:
        balance_text += "üïê *‚ïê‚ïê‚ïê –ü–û–°–õ–ï–î–ù–ò–ï –ü–û–ò–°–ö–ò ‚ïê‚ïê‚ïê*\n"
        for i, search in enumerate(recent_searches[:3], 1):
            status = "‚úÖ" if search.get('success', False) else "‚ùå"
            query = search.get('query', 'N/A')[:20] + "..." if len(search.get('query', '')) > 20 else search.get('query', 'N/A')
            search_type = search.get('search_type', 'general')
            date = search.get('timestamp', datetime.utcnow()).strftime('%d.%m %H:%M')
            
            type_emojis = {
                "phone": "üì±", "email": "üìß", "name": "üë§", "car_number": "üöó",
                "username": "üÜî", "ip_address": "üåê", "address": "üè†", "general": "üîç"
            }
            type_emoji = type_emojis.get(search_type, "üîç")
            
            balance_text += f"{status} {type_emoji} `{query}` - {date}\n"
        
        balance_text += "\n"

    # Recommendations based on attempts
    if user.attempts_remaining == 0:
        balance_text += "üö® *‚ïê‚ïê‚ïê –ü–û–ü–´–¢–ö–ò –ó–ê–ö–û–ù–ß–ò–õ–ò–°–¨ ‚ïê‚ïê‚ïê*\n"
        balance_text += "üîó *–ü–æ–ª—É—á–∏—Ç–µ –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫:*\n"
        balance_text += "‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n"
        balance_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/referral` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏\n"
        balance_text += "‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: +1 –ø–æ–ø—ã—Ç–∫–∞\n\n"
    elif user.attempts_remaining <= 3:
        balance_text += "‚ö†Ô∏è *‚ïê‚ïê‚ïê –ú–ê–õ–û –ü–û–ü–´–¢–û–ö ‚ïê‚ïê‚ïê*\n"
        balance_text += "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!\n"
        balance_text += "üîó –ö–æ–º–∞–Ω–¥–∞: `/referral`\n\n"

    balance_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    balance_text += "üí° *–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ* `/referral`"

    await send_telegram_message(chat_id, balance_text)

async def handle_referral_command(chat_id: int, user: User):
    """Handle referral command with enhanced referral system"""
    referral_link = f"https://t.me/{BOT_USERNAME}?start={user.referral_code}"

    # Get referral statistics
    referrals = await db.referrals.find({"referrer_id": user.telegram_id}).to_list(100)
    total_earned = len(referrals)

    referral_text = "üîó *‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê*\n"
    referral_text += " üí∞ *–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê*\n"
    referral_text += "*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê* üîó\n\n"

    referral_text += "üéØ *‚ïê‚ïê‚ïê –í–ê–®–ê –°–°–´–õ–ö–ê ‚ïê‚ïê‚ïê*\n"
    referral_text += f"üîó `{referral_link}`\n\n"
    referral_text += "üìã *–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"

    referral_text += "üìä *‚ïê‚ïê‚ïê –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê ‚ïê‚ïê‚ïê*\n"
    referral_text += f"üë• *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π:* `{user.total_referrals}`\n"
    referral_text += f"üíé *–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ–ø—ã—Ç–æ–∫:* `{total_earned}`\n"
    referral_text += f"üéØ *–í–∞—à –∫–æ–¥:* `{user.referral_code}`\n\n"

    referral_text += "üí∞ *‚ïê‚ïê‚ïê –ö–ê–ö –≠–¢–û –†–ê–ë–û–¢–ê–ï–¢ ‚ïê‚ïê‚ïê*\n"
    referral_text += "1Ô∏è‚É£ *–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å* —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏\n"
    referral_text += "2Ô∏è‚É£ *–î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç* –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n"
    referral_text += "3Ô∏è‚É£ *–î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è* –≤ –±–æ—Ç–µ\n"
    referral_text += "4Ô∏è‚É£ *–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ* +1 –ø–æ–ø—ã—Ç–∫—É –ø–æ–∏—Å–∫–∞\n"
    referral_text += "5Ô∏è‚É£ *–î—Ä—É–≥ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ—Ç* +1 –ø–æ–ø—ã—Ç–∫—É\n"
    referral_text += "6Ô∏è‚É£ *–ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ* –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!\n\n"

    referral_text += "üéÅ *‚ïê‚ïê‚ïê –ë–û–ù–£–°–´ ‚ïê‚ïê‚ïê*\n"
    referral_text += "‚Ä¢ üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞: +1 –ø–æ–ø—ã—Ç–∫–∞ –í–ê–ú\n"
    referral_text += "‚Ä¢ üéÅ –î—Ä—É–≥ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ—Ç: +1 –ø–æ–ø—ã—Ç–∫–∞\n"
    referral_text += "‚Ä¢ üîÑ –ü–æ–ø—ã—Ç–∫–∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞\n"
    referral_text += "‚Ä¢ üöÄ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"

    referral_text += "üì± *‚ïê‚ïê‚ïê –ì–î–ï –ü–û–î–ï–õ–ò–¢–¨–°–Ø ‚ïê‚ïê‚ïê*\n"
    referral_text += "‚Ä¢ üí¨ –í –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö (WhatsApp, Viber)\n"
    referral_text += "‚Ä¢ üì± –í —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö (VK, Instagram)\n"
    referral_text += "‚Ä¢ üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –° —Å–µ–º—å–µ–π –∏ –¥—Ä—É–∑—å—è–º–∏\n"
    referral_text += "‚Ä¢ üíº –° –∫–æ–ª–ª–µ–≥–∞–º–∏ –ø–æ —Ä–∞–±–æ—Ç–µ\n"
    referral_text += "‚Ä¢ üéÆ –í –∏–≥—Ä–æ–≤—ã—Ö —á–∞—Ç–∞—Ö\n\n"

    # Status based on referrals
    if user.total_referrals >= 10:
        referral_text += "üèÜ *‚ïê‚ïê‚ïê –°–¢–ê–¢–£–° VIP ‚ïê‚ïê‚ïê*\n"
        referral_text += "üåü –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã VIP-—Ä–µ—Ñ–µ—Ä–µ—Ä!\n"
        referral_text += f"üëë {user.total_referrals} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π\n\n"
    elif user.total_referrals >= 5:
        referral_text += "ü•á *‚ïê‚ïê‚ïê –°–¢–ê–¢–£–° –ú–ê–°–¢–ï–† ‚ïê‚ïê‚ïê*\n"
        referral_text += "‚≠ê –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –í—ã –º–∞—Å—Ç–µ—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!\n"
        referral_text += f"üèÖ {user.total_referrals} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π\n\n"
    elif user.total_referrals >= 1:
        referral_text += "ü•â *‚ïê‚ïê‚ïê –ü–ï–†–í–´–ï –£–°–ü–ï–•–ò ‚ïê‚ïê‚ïê*\n"
        referral_text += "üëç –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ!\n"
        referral_text += f"üìà {user.total_referrals} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π\n\n"

    referral_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    referral_text += "üí° *–ß–µ–º –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–∏—Å–∫–æ–≤!*"

    await send_telegram_message(chat_id, referral_text)

async def handle_help_command(chat_id: int, user: User):
    """Handle help command with comprehensive guide"""
    help_text = "üìñ *‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê*\n"
    help_text += " üìö *–ü–û–î–†–û–ë–ù–ê–Ø –°–ü–†–ê–í–ö–ê*\n"
    help_text += "*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê* üìñ\n\n"

    help_text += "üéØ *‚ïê‚ïê‚ïê –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ‚ïê‚ïê‚ïê*\n"
    help_text += "üîç `/search [–∑–∞–ø—Ä–æ—Å]` - –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö\n"
    help_text += "üí∞ `/balance` - –±–∞–ª–∞–Ω—Å –ø–æ–ø—ã—Ç–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    help_text += "üîó `/referral` - —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
    help_text += "üéØ `/capabilities` - –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞\n"
    help_text += "üìñ `/help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"

    help_text += "üîç *‚ïê‚ïê‚ïê –ë–´–°–¢–†–´–ï –ü–†–ò–ú–ï–†–´ ‚ïê‚ïê‚ïê*\n"
    help_text += "üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* `+79123456789`\n"
    help_text += "üìß *Email:* `ivan@mail.ru`\n"
    help_text += "üë§ *–§–ò–û:* `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤`\n"
    help_text += "üöó *–ê–≤—Ç–æ:* `–ê123–í–°777`\n"
    help_text += "üÜî *–ù–∏–∫–Ω–µ–π–º:* `@username`\n"
    help_text += "üè† *–ê–¥—Ä–µ—Å:* `–ú–æ—Å–∫–≤–∞ –¢–≤–µ—Ä—Å–∫–∞—è 1`\n\n"

    help_text += "üìä *‚ïê‚ïê‚ïê –ß–¢–û –ù–ê–ô–î–ï–¢ –ë–û–¢ ‚ïê‚ïê‚ïê*\n"
    help_text += "‚Ä¢ üìû –î–∞–Ω–Ω—ã–µ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤\n"
    help_text += "‚Ä¢ üìß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ email –∞–¥—Ä–µ—Å–∞–º\n"
    help_text += "‚Ä¢ üë• –ü—Ä–æ—Ñ–∏–ª–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö\n"
    help_text += "‚Ä¢ üè† –ê–¥—Ä–µ—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è\n"
    help_text += "‚Ä¢ üöó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º\n"
    help_text += "‚Ä¢ üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
    help_text += "‚Ä¢ üõí –î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤\n"
    help_text += "‚Ä¢ üìã –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
    help_text += "‚Ä¢ üéØ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ –∏–∑ 100+ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n\n"

    help_text += "üíé *‚ïê‚ïê‚ïê –°–ò–°–¢–ï–ú–ê –ü–û–ü–´–¢–û–ö ‚ïê‚ïê‚ïê*\n"
    help_text += "üéÅ *–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* 0 –ø–æ–ø—ã—Ç–æ–∫\n"
    help_text += "üîó *–ó–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:* +1 –ø–æ–ø—ã—Ç–∫–∞ –≤–∞–º –∏ –¥—Ä—É–≥—É\n"
    help_text += "üë• *–ë–µ–∑–ª–∏–º–∏—Ç:* –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π\n"
    help_text += "‚ö° *–ê–¥–º–∏–Ω—ã:* –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏\n\n"

    help_text += "üîó *‚ïê‚ïê‚ïê –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ‚ïê‚ïê‚ïê*\n"
    help_text += "1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É: `/referral`\n"
    help_text += "2Ô∏è‚É£ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏\n"
    help_text += "3Ô∏è‚É£ –î—Ä—É–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è\n"
    help_text += "4Ô∏è‚É£ –û–±–∞ –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ +1 –ø–æ–ø—ã—Ç–∫–µ\n"
    help_text += "5Ô∏è‚É£ –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!\n\n"

    help_text += "‚ö†Ô∏è *‚ïê‚ïê‚ïê –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê ‚ïê‚ïê‚ïê*\n"
    help_text += "‚Ä¢ üö´ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π\n"
    help_text += "‚Ä¢ üëÆ –°–æ–±–ª—é–¥–∞–π—Ç–µ –∑–∞–∫–æ–Ω—ã –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã\n"
    help_text += "‚Ä¢ ü§ù –£–≤–∞–∂–∞–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π\n"
    help_text += "‚Ä¢ üîí –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n"
    help_text += "‚Ä¢ üì¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª @uzri_sebya\n\n"

    help_text += "‚ùì *‚ïê‚ïê‚ïê –ü–†–û–ë–õ–ï–ú–´? ‚ïê‚ïê‚ïê*\n"
    help_text += "üìù –ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @eriksson_sop\n"
    help_text += "üîß –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n\n"

    help_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    help_text += "üöÄ *–ì–æ—Ç–æ–≤ –Ω–∞–π—Ç–∏ –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!*"

    await send_telegram_message(chat_id, help_text)

async def handle_admin_command(chat_id: int, text: str, user: User):
    """Handle admin commands with enhanced statistics"""
    # Get system statistics
    total_users = await db.users.count_documents({})
    total_searches = await db.searches.count_documents({})
    total_referrals = await db.referrals.count_documents({})
    successful_searches = await db.searches.count_documents({"success": True})

    # Recent activity (last 24 hours)
    from datetime import datetime, timedelta
    yesterday = datetime.utcnow() - timedelta(days=1)
    recent_users = await db.users.count_documents({"created_at": {"$gte": yesterday}})
    recent_searches = await db.searches.count_documents({"timestamp": {"$gte": yesterday}})

    # Top users by referrals
    top_referrers = await db.users.find().sort("total_referrals", -1).limit(5).to_list(5)

    admin_text = "üëë *‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê*\n"
    admin_text += " üîß *–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨*\n"
    admin_text += "*‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê* üëë\n\n"

    admin_text += "üìä *‚ïê‚ïê‚ïê –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ‚ïê‚ïê‚ïê*\n"
    admin_text += f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* `{total_users}`\n"
    admin_text += f"üîç *–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤:* `{total_searches}`\n"
    admin_text += f"‚úÖ *–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤:* `{successful_searches}`\n"
    admin_text += f"üîó *–í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:* `{total_referrals}`\n"
    
    if total_searches > 0:
        success_rate = (successful_searches / total_searches) * 100
        admin_text += f"üìà *–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:* `{success_rate:.1f}%`\n"
    
    admin_text += "\n"

    admin_text += "üìà *‚ïê‚ïê‚ïê –ê–ö–¢–ò–í–ù–û–°–¢–¨ (24—á) ‚ïê‚ïê‚ïê*\n"
    admin_text += f"üÜï *–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* `{recent_users}`\n"
    admin_text += f"üîç *–ü–æ–∏—Å–∫–æ–≤ –∑–∞ –¥–µ–Ω—å:* `{recent_searches}`\n\n"

    admin_text += "üèÜ *‚ïê‚ïê‚ïê –¢–û–ü –†–ï–§–ï–†–ï–†–´ ‚ïê‚ïê‚ïê*\n"
    for i, referrer in enumerate(top_referrers[:3], 1):
        name = referrer.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:15]
        refs = referrer.get('total_referrals', 0)
        admin_text += f"{i}. `{name}` - {refs} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n"
    
    admin_text += "\n"

    admin_text += "üîß *‚ïê‚ïê‚ïê –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ‚ïê‚ïê‚ïê*\n"
    admin_text += "üíé `/give [ID] [–ø–æ–ø—ã—Ç–∫–∏]` - –≤—ã–¥–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏\n"
    admin_text += "üìä `/stats` - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    admin_text += "üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥\n\n"

    admin_text += "üìã *‚ïê‚ïê‚ïê –ü–û–õ–ï–ó–ù–´–ï ID ‚ïê‚ïê‚ïê*\n"
    admin_text += f"ü§ñ *–í–∞—à ID:* `{user.telegram_id}`\n"
    admin_text += f"üéØ *–í–∞—à –∫–æ–¥:* `{user.referral_code}`\n\n"

    admin_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    admin_text += "üëë *–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–∏—Å—Ç–µ–º–æ–π*"

    await send_telegram_message(chat_id, admin_text)

async def handle_give_attempts_command(chat_id: int, text: str, user: User):
    """Handle give attempts admin command"""
    parts = text.split()
    if len(parts) != 3:
        await send_telegram_message(
            chat_id,
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã*\n\n"
            "*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:* `/give [user_id] [attempts]`\n"
            "*–ü—Ä–∏–º–µ—Ä:* `/give 123456789 5`"
        )
        return

    try:
        target_user_id = int(parts[1])
        attempts_to_give = int(parts[2])

        # Check if user exists
        target_user = await db.users.find_one({"telegram_id": target_user_id})
        if not target_user:
            await send_telegram_message(
                chat_id,
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
            return

        # Give attempts
        await db.users.update_one(
            {"telegram_id": target_user_id},
            {"$inc": {"attempts_remaining": attempts_to_give}}
        )

        # Notify admin
        await send_telegram_message(
            chat_id,
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –≤—ã–¥–∞–Ω–æ {attempts_to_give} –ø–æ–ø—ã—Ç–æ–∫"
        )

        # Notify user
        await send_telegram_message(
            target_user_id,
            f"üéÅ *–í–∞–º –≤—ã–¥–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏!*\n\n"
            f"üíé –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts_to_give}\n"
            f"–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–∏—Å–∫!"
        )

    except ValueError:
        await send_telegram_message(
            chat_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫"
        )
    except Exception as e:
        logging.error(f"Give attempts error: {e}")
        await send_telegram_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–æ–ø—ã—Ç–æ–∫"
        )

async def handle_stats_command(chat_id: int, user: User):
    """Handle stats admin command"""
    try:
        # Get comprehensive statistics
        total_users = await db.users.count_documents({})
        total_searches = await db.searches.count_documents({})
        total_referrals = await db.referrals.count_documents({})
        successful_searches = await db.searches.count_documents({"success": True})

        # Recent activity
        recent_users = await db.users.count_documents({
            "created_at": {"$gte": datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)}
        })
        recent_searches = await db.searches.count_documents({
            "timestamp": {"$gte": datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)}
        })

        # Search type distribution
        search_types = await db.searches.aggregate([
            {"$group": {"_id": "$search_type", "count": {"$sum": 1}}},
            {"$sort": {"count": -1}}
        ]).to_list(10)

        stats_text = "üìä *‚ïê‚ïê‚ïê –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ‚ïê‚ïê‚ïê*\n\n"
        
        stats_text += f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}\n"
        stats_text += f"üîç *–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤:* {total_searches}\n"
        stats_text += f"‚úÖ *–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤:* {successful_searches}\n"
        stats_text += f"üîó *–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:* {total_referrals}\n\n"

        stats_text += f"üìà *–ó–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
        stats_text += f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {recent_users}\n"
        stats_text += f"‚Ä¢ –ü–æ–∏—Å–∫–æ–≤: {recent_searches}\n\n"

        if total_searches > 0:
            success_rate = (successful_searches / total_searches) * 100
            stats_text += f"üìä *–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤:* {success_rate:.1f}%\n\n"

        if search_types:
            stats_text += "üîç *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–∞:*\n"
            for search_type in search_types[:5]:
                stats_text += f"‚Ä¢ {search_type['_id']}: {search_type['count']}\n"

        await send_telegram_message(chat_id, stats_text)

    except Exception as e:
        logging.error(f"Stats error: {e}")
        await send_telegram_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )

# API endpoints for web dashboard
@api_router.post("/search")
async def api_search(query: str = Query(...)):
    """Search via usersbox API"""
    headers = {"Authorization": USERSBOX_TOKEN}
    try:
        response = requests.get(
            f"{USERSBOX_BASE_URL}/search",
            headers=headers,
            params={"q": query},
            timeout=30
        )
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        raise HTTPException(status_code=500, detail=f"API request failed: {str(e)}")

@api_router.get("/users")
async def get_users():
    """Get all users for admin dashboard"""
    users = await db.users.find().to_list(1000)
    for user in users:
        user["_id"] = str(user["_id"])
    return users

@api_router.get("/searches")
async def get_searches():
    """Get search history"""
    searches = await db.searches.find().sort("timestamp", -1).limit(100).to_list(100)
    for search in searches:
        search["_id"] = str(search["_id"])
    return searches

@api_router.post("/give-attempts")
async def give_attempts_api(user_id: int, attempts: int):
    """Give attempts to user via API"""
    try:
        result = await db.users.update_one(
            {"telegram_id": user_id},
            {"$inc": {"attempts_remaining": attempts}}
        )
        
        if result.modified_count == 0:
            raise HTTPException(status_code=404, detail="User not found")

        # Notify user
        await send_telegram_message(
            user_id,
            f"üéÅ *–í–∞–º –≤—ã–¥–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏!*\n\n"
            f"üíé –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts}\n"
            f"–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–∏—Å–∫!"
        )

        return {"status": "success", "message": f"Gave {attempts} attempts to user {user_id}"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@api_router.get("/stats")
async def get_stats():
    """Get bot statistics"""
    try:
        total_users = await db.users.count_documents({})
        total_searches = await db.searches.count_documents({})
        total_referrals = await db.referrals.count_documents({})
        successful_searches = await db.searches.count_documents({"success": True})

        return {
            "total_users": total_users,
            "total_searches": total_searches,
            "total_referrals": total_referrals,
            "successful_searches": successful_searches,
            "success_rate": (successful_searches / total_searches * 100) if total_searches > 0 else 0
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# Include the router in the main app
app.include_router(api_router)

app.add_middleware(
    CORSMiddleware,
    allow_credentials=True,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@app.on_event("shutdown")
async def shutdown_db_client():
    client.close()